{"version":3,"file":"popup.7bc5745736213a00e808.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAKA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAQA;AAAA;AA5IA;AA8IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7KA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;ACxBA","sources":["webpack://chrome-extension/./src/popup/Popup.jsx","webpack://chrome-extension/webpack/runtime/getFullHash"],"sourcesContent":["/* eslint-disable no-undef */\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Avatar,\n  Container,\n  TextField,\n  Stack,\n  Button,\n  List,\n  CircularProgress,\n  ListItem,\n  ListItemText,\n  Typography,\n  ListItemAvatar,\n  Divider,\n  LinearProgress,\n  FormControl,\n} from '@mui/material/';\nimport axios from 'axios';\nimport moment from 'moment';\nimport ThumbUpOffAltIcon from '@mui/icons-material/ThumbUpOffAlt';\nimport ThumbDownOffAltIcon from '@mui/icons-material/ThumbDownOffAlt';\nimport { useQuery, useMutation, gql } from '@apollo/client';\n \nconst Popup = () => {\n  const [userInput, setUserInput] = useState('');\n  // const [error, setError] = useState(false);\n  // const [loading, setLoading] = useState(false);\n  const [reviews, setReviews] = useState([]);\n  const [rerender, setRerender] = useState(false);\n  const [url, setUrl] = useState('');\n\n  const GET_COMMENTS = gql`\n  query getComments($url: String!) {\n    getComments(location: $url) {\n      _id\n      username\n      text\n      reviews\n    }\n  }\n`;\nconst CRETE_COMMENT = gql`\nmutation createComment($input: createCommentInput!){\n  createComment( createCommentInput: $input){\n    text\n    time\n    username\n    reviews\n  }\n}`;\n  \nconst {data, error, loading} = useQuery(GET_COMMENTS, {variables: {url}});\nconsole.log('data',data);\nconsole.log('error',error);\nconst {sendComment} = useMutation(CRETE_COMMENT, {variables: {}});\n\n\n\n  useEffect(() => {\n    //setLoading(true);\n    chrome.tabs.query({ active: true, lastFocusedWindow: true }, tabs => {\n      setUrl(tabs[0].url.split('/')[2]);\n      console.log('url', url)\n      //axios.get(`http://localhost:3000/graphql/${encodeURIComponent(url)}`).then(res => console.log('res', res));\n      setReviews(data);\n      // axios.get(`http://localhost:3000/graphql/${encodeURIComponent(url)}`)\n      //   .then((res) => {\n      //     const reviews = res.data;\n      //     console.log('reviews', reviews)\n      //     const temp = [];\n      //     reviews.forEach(review => {\n      //       temp.push(<ListItem alignItems='flex-start' key={review._id}>\n      //         <ListItemAvatar>\n      //           <Avatar />\n      //         </ListItemAvatar>\n      //         <ListItemText\n      //           primary={`${review.username} - ${moment(review.time).format('HH:mm DD MMM')}`}\n      //           secondary={<Typography\n      //             sx={{ wordWrap: 'break-word' }}>{review.comment}</Typography>}\n      //         />\n      //       </ListItem>, <Divider />);\n      //     });\n      //     temp.length > 0 ? setReviews(temp) : setReviews(<Typography sx={{ display: 'flex', alignContent: 'center' }}>No\n      //       reviews!</Typography>);\n      //     //setLoading(false);\n      });\n      \n    //});\n   \n  }, [url, data]);\n\n  const handleUserInput = (e) => {\n    setUserInput(e.target.value)};\n\n  const submit = async () => {\n    //setLoading(true);\n    // chrome.tabs.query({ active: true, lastFocusedWindow: true }, tabs => {\n    //   setUrl(tabs[0].url.split('/')[2]);\n      // axios.post('http://localhost:3000/graphql', {\n      //   time: new Date().toISOString(),\n      //   location: url,\n      //   isLiked: true,\n      //   username: 'choenix',\n      //   comment: userInput,\n      // })\n      //   .then((res) => {\n      //     //setLoading(false);\n      //     setUserInput('');\n      //     setRerender(!rerender);\n      //     setError(false);\n      //   })\n      //   .catch((err) => {\n      //     setError(true);\n      //     //setLoading(false);\n      //   });\n      sendComment({\n        text: userInput,\n        time: new Date(),\n        username: 'Chel',\n        location: url,\n      });\n      \n      setRerender(!rerender);\n    //});\n  };\n\n  // if (error) return <p>`Error: ${error.message}</p>\n  return (\n      <Container sx={{\n        m: 2,\n        display: 'flex',\n        justifyContent: 'spaceBetween',\n        flexWrap: 'wrap',\n        width: '100%',\n        minWidth: '20rem',\n        height: '100%'\n        }}>\n        <Stack>\n          <Stack direction=\"row\" spacing={2}>\n            <Avatar alt=\"Remy Sharp\" src=\"/static/images/avatar/1.jpg\" />\n            <p>Adam Lambert</p>\n            \n           </Stack>\n           {/* <p>Review score: {reviews.likes + reviews.dislikes}</p> */}\n           <Stack direction=\"row\" spacing={2}>\n            <ThumbUpOffAltIcon color=\"success\"/>\n            <ThumbDownOffAltIcon color=\"error\"/>\n           </Stack>\n\n           {/* <LinearProgress color=\"success\" value={reviews.likes}/> */}\n        </Stack>   \n        \n        <Stack sx={{ mt: 4 }} spacing={'2rem'} maxHeight={'10rem'}>\n          <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\n            {loading ? reviews :\n              <CircularProgress sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }} />\n              }\n          </List>\n        </Stack>\n        {/* {reviews.length > 0 ? reviews.map(review => (\n          <ListItemAvatar>\n      //           <Avatar />\n      //         </ListItemAvatar>\n      //         <ListItemText\n      //           primary={`${review.username} - ${moment(review.time).format('HH:mm DD MMM')}`}\n      //           secondary={<Typography\n      //             sx={{ wordWrap: 'break-word' }}>{review.comment}</Typography>}\n      //         />\n      //       </ListItem>, <Divider />)\n        )): setReviews(<Typography sx={{ display: 'flex', alignContent: 'center' }}>No reviews!</Typography>)} */}\n          <TextField\n          // error={error}\n          value={userInput}\n          onChange={handleUserInput}\n          variant=\"outlined\"\n          label=\"Type your comment here\"\n          sx={{width: '100%', }}\n          fullWidth\n          autoComplete=\"off\"\n        />\n                   \n        <Button\n          variant=\"contained\"\n          sx={{mt: 1,  }} \n          onClick={submit}\n          size=\"small\"\n          color=\"inherit\"\n        >\n          Send\n        </Button>\n   \n      </Container>\n      \n  );\n};\n\nexport default Popup;\n","__webpack_require__.h = () => (\"7146e1540671788cdc65\")"],"names":[],"sourceRoot":""}
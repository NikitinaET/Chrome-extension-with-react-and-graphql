{"version":3,"file":"popup.bc2c3c6bc0ba6e60a6a0.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAgxJA;AA0JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAxLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;ACxBA","sources":["webpack://chrome-extension/./src/popup/Popup.jsx","webpack://chrome-extension/webpack/runtime/getFullHash"],"sourcesContent":["/* eslint-disable no-undef */\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Avatar,\r\n  Container,\r\n  TextField,\r\n  Stack,\r\n  Button,\r\n  List,\r\n  CircularProgress,\r\n  ListItem,\r\n  ListItemText,\r\n  Typography,\r\n  ListItemAvatar,\r\n  Divider,\r\n  LinearProgress,\r\n  FormControl,\r\n} from '@mui/material/';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport ThumbUpOffAltIcon from '@mui/icons-material/ThumbUpOffAlt';\r\nimport ThumbDownOffAltIcon from '@mui/icons-material/ThumbDownOffAlt';\r\nimport { useQuery, useMutation, gql } from '@apollo/client';\r\n \r\nconst Popup = () => {\r\n  const [userInput, setUserInput] = useState('');\r\n  const [error, setError] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  const [reviews, setReviews] = useState([]);\r\n  const [rerender, setRerender] = useState(false);\r\n  const [location, setLocation] = useState('');\r\n\r\n  const GET_COMMENTS = gql`\r\n  query getComments($location: String!) {\r\n    getComments(location: $location) {\r\n      username\r\n      text\r\n    }\r\n  }\r\n`;\r\n\r\nconst CREATE_COMMENT = gql`\r\n  mutation createComment($commentText: CreateCommentInput!){\r\n    createComment(commentText: $commentText ){\r\n      username\r\n      text\r\n      time\r\n    } \r\n  }\r\n`;\r\n\r\n\r\nconst [createComment, {data: data2}] = useMutation(CREATE_COMMENT);\r\n\r\nconst {data} = useQuery(GET_COMMENTS, {variables: {location: \"www.apolographql.com\"}},);\r\nconsole.log('data', data);\r\n\r\n  useEffect(() => {\r\n    //setLoading(true);\r\n    chrome.tabs.query({ active: true, currentWindow: true }, tabs => {\r\n      const url = (tabs[0].url.split('/')[2]);\r\n      console.log('url', url);\r\n      setLocation(url);\r\n      console.log('location:', location)\r\n      setReviews(data.getComments);\r\n      // axios.get(`http://localhost:3000/graphql/${encodeURIComponent(url)}`)\r\n      //   .then((res) => {\r\n      //     const reviews = res.data;\r\n      //     console.log('reviews', reviews)\r\n      //     const temp = [];\r\n      //     reviews.forEach(review => {\r\n      //       temp.push(<ListItem alignItems='flex-start' key={review._id}>\r\n      //         <ListItemAvatar>\r\n      //           <Avatar />\r\n      //         </ListItemAvatar>\r\n      //         <ListItemText\r\n      //           primary={`${review.username} - ${moment(review.time).format('HH:mm DD MMM')}`}\r\n      //           secondary={<Typography\r\n      //             sx={{ wordWrap: 'break-word' }}>{review.comment}</Typography>}\r\n      //         />\r\n      //       </ListItem>, <Divider />);\r\n      //     });\r\n      //     temp.length > 0 ? setReviews(temp) : setReviews(<Typography sx={{ display: 'flex', alignContent: 'center' }}>No\r\n      //       reviews!</Typography>);\r\n      //     //setLoading(false);\r\n      //   });\r\n      \r\n    });\r\n   \r\n  }, [location, data]);\r\n\r\n  const handleUserInput = (e) => {\r\n    setUserInput(e.target.value);\r\n    console.log(e.target.value);\r\n  };\r\n\r\n  const submit = async () => {\r\n    //setLoading(true);\r\n    // chrome.tabs.query({ active: true, lastFocusedWindow: true }, tabs => {\r\n    //   const url = tabs[0].url.split('/')[2];\r\n      // axios.post(process.env.base_url, {\r\n      //   time: new Date().toISOString(),\r\n      //   location: url,\r\n      //   isLiked: true,\r\n      //   username: 'choenix',\r\n      //   comment: userInput,\r\n      // })\r\n      //   .then((res) => {\r\n      //     setLoading(false);\r\n      //     setUserInput('');\r\n      //     setRerender(!rerender);\r\n      //     setError(false);\r\n      //   })\r\n      //   .catch((err) => {\r\n      //     setError(true);\r\n      //     setLoading(false);\r\n      //   });\r\n    //});\r\n    createComment({variables: {commentText: {\r\n      time: new Date().toISOString(),\r\n      location,\r\n      isLiked: true,\r\n      username: 'choenix',\r\n      text: userInput,\r\n    }}});\r\n    setRerender(true)\r\n  };\r\n\r\n\r\n  return (\r\n      <Container sx={{\r\n        m: 2,\r\n        display: 'flex',\r\n        justifyContent: 'spaceBetween',\r\n        flexWrap: 'wrap',\r\n        width: '100%',\r\n        minWidth: '20rem',\r\n        height: '100%'\r\n        }}>\r\n        <Stack>\r\n          <Stack direction=\"row\" spacing={2}>\r\n            <Avatar alt=\"Remy Sharp\" src=\"\" />\r\n            <p>Adam Lambert</p>\r\n            \r\n           </Stack>\r\n           {/* <p>Review score: {reviews.isLiked}</p> */}\r\n           <Stack direction=\"row\" spacing={2}>\r\n            <ThumbUpOffAltIcon color=\"success\"/>\r\n            <ThumbDownOffAltIcon color=\"error\"/>\r\n           </Stack>\r\n\r\n           {/* <LinearProgress color=\"success\" value={reviews.isLiked}/> */}\r\n        </Stack>   \r\n        \r\n        <Stack sx={{ mt: 4 }} spacing={'2rem'} maxHeight={'10rem'}>\r\n          <List sx={{ width: '100%', maxWidth: 360, bgcolor: 'background.paper' }}>\r\n            {loading ? reviews.map(review => {\r\n              return (\r\n              <>\r\n                <ListItem alignItems='flex-start' key={review._id}>\r\n                   <ListItemAvatar>\r\n                     <Avatar />\r\n                </ListItemAvatar>\r\n                <List>\r\n                <ListItemText\r\n                primary={`${review.username} - ${moment(review.time).format('HH:mm DD MMM')}`}\r\n                secondary={\r\n                <Typography\r\n                  sx={{ wordWrap: 'break-word' }}>{review.text}\r\n                  </Typography>\r\n                }\r\n              />\r\n              </List>\r\n                </ListItem>\r\n                <Divider/>\r\n              </>  \r\n              )\r\n            }) :\r\n              <CircularProgress sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center' }} />}\r\n          </List>\r\n        </Stack>\r\n\r\n\r\n          <TextField\r\n          error={error}\r\n          value={userInput}\r\n          onChange={handleUserInput}\r\n          variant=\"outlined\"\r\n          label=\"Type your comment here\"\r\n          sx={{width: '100%', }}\r\n          fullWidth\r\n          autoComplete=\"off\"\r\n        />\r\n                   \r\n        <Button\r\n          variant=\"contained\"\r\n          sx={{mt: 1,  }} \r\n          onClick={submit}\r\n          size=\"small\"\r\n          color=\"inherit\"\r\n        >\r\n          Send\r\n        </Button>\r\n            \r\n      </Container>\r\n  );\r\n};\r\n\r\nexport default Popup;\r\n","__webpack_require__.h = () => (\"c8a4596fc76e967d9018\")"],"names":[],"sourceRoot":""}
{"version":3,"file":"popup.cc2e11a059623ce79904.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAgvOA;AAyOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA1TA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;ACzBA","sources":["webpack://chrome-extension/./src/popup/Popup.jsx","webpack://chrome-extension/webpack/runtime/getFullHash"],"sourcesContent":["/* eslint-disable no-undef */\nimport React, { useState, useEffect } from \"react\";\nimport {\n  Avatar,\n  Container,\n  TextField,\n  Stack,\n  Button,\n  List,\n  CircularProgress,\n  ListItem,\n  ListItemText,\n  Typography,\n  ListItemAvatar,\n  Divider,\n  LinearProgress,\n  IconButton,\n} from \"@mui/material/\";\nimport moment from \"moment\";\nimport ThumbUpOffAltIcon from \"@mui/icons-material/ThumbUpOffAlt\";\nimport ThumbDownOffAltIcon from \"@mui/icons-material/ThumbDownOffAlt\";\nimport { useQuery, useMutation, gql } from \"@apollo/client\";\nimport { Route, Routes } from \"react-router\";\nimport Login from \"./Login\";\n\nconst Popup = () => {\n  const [userInput, setUserInput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [comments, setComments] = useState([]);\n  const [ratio, setRatio] = useState([]);\n  const [rerender, setRerender] = useState(false);\n  const [location, setLocation] = useState(\"\");\n\n  const GET_COMMENTS = gql`\n    query getComments($location: String!) {\n      getComments(location: $location) {\n        _id\n        username\n        text\n        time\n        reviews {\n          _id\n          username\n          isLiked\n          location\n        }\n      }\n    }\n  `;\n\n  const CREATE_COMMENT = gql`\n    mutation createComment($commentText: CreateCommentInput!) {\n      createComment(commentText: $commentText) {\n        username\n        text\n        time\n      }\n    }\n  `;\n\n  const CREATE_REACTION = gql`\n    mutation createReaction($id: String!, $reaction: UpdateCommentInput!) {\n      createReaction(_id: $id, reaction: $reaction) {\n        username\n        isLiked\n        location\n      }\n    }\n  `;\n\n\n  const GET_REVIEW = gql`\n    query getReview($location: String!) {\n      getReview(location: $location) {\n        username\n        isLiked\n        location\n      }\n    }\n  `;\n\n  const CREATE_REVIEW = gql`\n    mutation createREVIEW($createReviewInput: CreateReviewInput!) {\n      createReview(createReviewInput: $createReviewInput) {\n        username\n        isLiked\n        location\n      }\n    }\n  `;\n\n  \n  const [createComment, { data: data2 }] = useMutation(CREATE_COMMENT, {\n    refetchQueries: [{ query: GET_COMMENTS, variables: { location } }],\n  });\n  const [createReview, { data: data3 }] = useMutation(CREATE_REVIEW, {\n    refetchQueries: [{query: GET_REVIEW, variables: { location }}]\n  });\n  const [createReaction, {data: data4}] = useMutation(CREATE_REACTION)\n\n  const { data, refetch } = useQuery(GET_COMMENTS, {\n    fetchPolicy: \"no-cache\",\n    nextFetchPolicy: \"network-only\",\n    variables: { location },\n  });\n\n  const { data: review, refetch: refetch2 } = useQuery(GET_REVIEW, { variables: { location } });\n  console.log(\"data\", data);\n\n  useEffect(() => {\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      const url = tabs[0].url.split(\"/\")[2];\n      console.log(\"url\", url);\n      setLocation(url);\n      console.log(\"location:\", location);\n      if (data) setComments(data.getComments);\n      if (review) setRatio(review.getReview);\n    }); \n  }, [location, data, review]);\n\n  const handleUserInput = (e) => {\n    setUserInput(e.target.value);\n    console.log(e.target.value);\n  };\n\n  const submit = async () => {\n    createComment({\n      variables: {\n        commentText: {\n          time: new Date().toISOString(),\n          location,\n          isLiked: true,\n          username: \"choenix\",\n          text: userInput,\n        },\n      },\n    });\n    setUserInput(\"\");\n    setComments((await refetch({ location })).data.getComments);\n  };\n\n  // if (error) return <p>`Error: ${error.message}</p>\n  const likes = ratio?.reduce((acc, el) => el.isLiked ? acc + 1 : acc, 0);\n  const reviews = ratio?.length;\n  console.log(likes, reviews)\n  return (\n    <Container\n      sx={{\n        m: 2,\n        display: \"flex\",\n        justifyContent: \"spaceBetween\",\n        flexDirection: \"column\",\n        flexWrap: \"wrap\",\n        width: \"100%\",\n        minWidth: \"20rem\",\n        height: \"100%\",\n      }}\n    >\n      <Stack\n        sx={{\n          flexGrow: 0,\n          flexShrink: 0,\n        }}\n      >\n        <Stack direction=\"row\" spacing={2}>\n          <Avatar alt=\"Remy Sharp\" src=\"\" />\n          <p>Adam Lambert</p>\n        </Stack>\n        <p>Review score: {comments.isLiked}</p>\n        <Stack direction=\"row\" spacing={2}>\n          <IconButton\n            onClick={async () => {\n              createReview({\n                variables: {\n                  createReviewInput: {\n                    username: \"Adam Lambert\",\n                    isLiked: true,\n                    location,\n                  },\n                },\n              });\n              setRatio((await refetch2()).data.getReview);\n            }}\n          >\n            <ThumbUpOffAltIcon\n              color={review?.isLiked ? \"success\" : \"primary\"}\n            />\n          </IconButton>\n\n          <IconButton\n            onClick={async () => {\n              createReview({\n                variables: {\n                  createReviewInput: {\n                    username: \"Adam Lambert\",\n                    isLiked: false,\n                    location,\n                  },\n                },\n              });\n              setRatio((await refetch2()).data.getReview);\n            }}\n          >\n            <ThumbDownOffAltIcon\n              color={review?.isLiked ? \"primary \" : \"error\"}\n            />\n          </IconButton>\n        </Stack>\n\n        {/* <LinearProgress color=\"success\" value={comments.isLiked} /> */}\n        {reviews ? \n        <><div style={{backgroundColor: 'red', padding: 0}}>\n        <div style={{width: `${likes / reviews * 100}%`, height: '5px', backgroundColor: 'green'}}></div></div></> :\n        <></>\n        }\n        \n      </Stack>\n\n      <Stack\n        sx={{\n          mt: 4,\n          flexGrow: 1,\n          overflowY: \"scroll\",\n        }}\n        spacing={\"2rem\"}\n        maxHeight={\"10rem\"}\n      >\n        <List\n          sx={{ width: \"100%\", maxWidth: 360, bgcolor: \"background.paper\" }}\n        >\n          {comments ? (\n            comments.map((comment) => {\n              return (\n                <>\n                  <ListItem\n                    alignItems=\"flex-start\"\n                    key={comment._id}\n                    disablePadding\n                  >\n                    <ListItemAvatar>\n                      <Avatar />\n                    </ListItemAvatar>\n\n                    <ListItemText\n                      primary={`${comment.username} - ${moment(\n                        comment.time\n                      ).format(\"HH:mm DD MMM\")}`}\n                      secondary={\n                        <>\n                          <Typography sx={{ wordWrap: \"break-word\" }}>\n                            {comment.text}\n                          </Typography>\n                          <IconButton\n                            onClick={() => {\n                              createReaction({\n                                variables: {\n                                  id: comment._id,\n                                  reaction: {\n                                    username: \"Adam Lambert\",\n                                    isLiked: true,\n                                    location,\n                                  },\n                                },\n                              });\n                              console.log(\"hui\");\n                            }}\n                          >\n                            <ThumbUpOffAltIcon\n                              color={review?.isLiked ? \"primary \" : \"error\"}\n                            />\n                          </IconButton>\n                          <IconButton\n                            onClick={() => {\n                              createReaction({\n                                variables: {\n                                  id: comment._id,\n                                  reaction: {\n                                    username: \"Adam Lambert\",\n                                    isLiked: false,\n                                    location,\n                                  },\n                                },\n                              });\n                            }}\n                          >\n                            <ThumbDownOffAltIcon\n                              color={review?.isLiked ? \"primary \" : \"error\"}\n                            />\n                          </IconButton>\n                        </>\n                      }\n                    />\n                  </ListItem>\n                  <Divider key={`d${comment._id}`} />\n                </>\n              );\n            })\n          ) : (\n            <CircularProgress\n              sx={{\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n              }}\n            />\n          )}\n        </List>\n      </Stack>\n\n      <Stack\n        sx={{\n          flexGrow: 0,\n          flexShrink: 0,\n        }}\n      >\n        <TextField\n          // error={error}\n          value={userInput}\n          onChange={handleUserInput}\n          variant=\"outlined\"\n          label=\"Type your comment here\"\n          sx={{ width: \"100%\", mt: \"2rem\" }}\n          fullWidth\n          autoComplete=\"off\"\n        />\n        <Button\n          variant=\"contained\"\n          sx={{ mt: 1 }}\n          onClick={submit}\n          size=\"small\"\n          color=\"inherit\"\n        >\n          Send\n        </Button>\n      </Stack>\n    </Container>\n  );\n};\n\nexport default Popup;\n","__webpack_require__.h = () => (\"32034d5189b77af6eadc\")"],"names":[],"sourceRoot":""}